openapi: 3.0.3
info:
  title: Sunglasses.io
  version: 1.0.11
  description: This is a Sunglasses Store Server based on the OpenAPI 3.0 specification.
  contact:
    email: notsolittle88@gmail.com
    name: Mutsumi Hata
    url: https://github.com/nsLittle
paths:
  /:
    summary: Home page
    description: Home page with FE store mocked in wireframe. Not BE, but for my own visual purposes to determine what routes need to be served.
    get:
      tags:
        - Home
      summary: GET home page
      description: GET home page with FE store mocked in wireframe
      operationId: get.home
      responses:
        default:
          description: Default error sample response
          content:
            application/xml:
              examples:
                Home:
                  value: "'../index.html'"
  /brands:
    summary: Brand names
    description: Names of sunglasses brands
    get:
      tags:
        - Brands
      summary: GET brand names
      description: GET names of sunglasses brands
      operationId: get.brands
      responses:
        default:
          description: Default error sample response
          content:
            application/json:
              examples:
                Default:
                  value: |-
                    [
                    "Oakley",
                    "Ray Ban",
                    "Levi's",
                    "DKNY",
                    "Burberry"
                    ]
  /brands/{name}:
    summary: Sunglasses by brand name
    description: Sunglasses product details by brand name
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Brands
      summary: GET sunglasses by brand name
      description: GET sunglasses product details by brand name
      operationId: get.brand.name
      responses:
        default:
          description: Default error sample response
          content:
            application/json:
              examples:
                Oakley:
                  value: >-
                    [ { "id": "1", "categoryId": "1", "name": "Superglasses",
                    "description": "The best glasses in the world", "price":
                    150, "imageUrls": [
                    "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg",
                    "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg",
                    "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg"
                    ] }, { "id": "2", "categoryId": "1", "name": "Black
                    Sunglasses", "description": "The best glasses in the world",
                    "price": 100, "imageUrls": [
                    "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg",
                    "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg",
                    "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg"
                    ] }, { "id": "3", "categoryId": "1", "name": "Brown
                    Sunglasses", "description": "The best glasses in the world",
                    "price": 50, "imageUrls": [
                    "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg",
                    "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg",
                    "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg"
                    ] } ]
  /products:
    summary: Product names
    description: Sunglasses by product names
    get:
      tags:
        - Products
      summary: GET product names
      description: GET sunglasses by product names
      operationId: get.products
      responses:
        default:
          description: Default error sample response
          content:
            application/json:
              examples:
                Default:
                  value: |-
                    [
                    "Superglasses",
                    "Black Sunglasses",
                    "Brown Sunglasses",
                    "Better glasses",
                    "Glasses",
                    "glas",
                    "QDogs Glasses",
                    "Coke cans",
                    "Sugar",
                    "Peanut Butter",
                    "Habanero"
                    ]
  /products/{name}:
    summary: GET product details
    description: GET product details by sunglasses name
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Products
      summary: GET product details by sunglasses name
      description: GET product details by sunglasses name
      operationId: get.products.name
      responses:
        default:
          description: Default error sample response
          content:
            application/json:
              examples:
                glas:
                  value: >-
                    { "name": "glas", "description": "Pretty awful glasses,
                    "price": 10, "imageUrls": [
                    "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg",
                    "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg",
                    "https://image.shutterstock.com/z/stock-photo-yellow-sunglasses-white-backgound-600820286.jpg"
                    ] }
  /login:
    summary: Login to authenticate user
    description: Login to authenticate user
    post:
      tags:
        - Login, Cart
      summary: POST login to authenticate user
      description: POST login to authenticate user
      operationId: post.login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "greenlion235"
                password:
                  type: string
                  example: "waters"
          examples:
            LoginExample:
              summary: Example login request
              value:
                username: "greenlion235"
                password: "waters"
      responses:
        default:
          description: Default error sample response
          content:
            text/plain; charset=utf-8:
              examples:
                Authentication:
                  value: |-
                    {
                      "token": "9527e3a06a598251710743aa74e29e3681762684a01b184762469005a26afef3"
                    }
  /users:
    summary: Users' names
    description: Users' names
    get:
      tags:
        - Login, Cart
      summary: GET users' names
      description: GET users' names
      operationId: get.users
      responses:
        default:
          description: Default error sample response
          content:
            application/json:
              examples:
                Default:
                  value: |-
                    [
                    "susanna",
                    "salvador",
                    "natalia"
                    ]
      security:
        - basicAuth: []
        - bearerAuth: []
  /{name}:
    summary: User's cart
    description: User's cart contents
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Login, Cart
      summary: GET user's cart
      description: GET user's cart contents
      operationId: get.cart
      responses:
        default:
          description: Default error sample response
          content:
            application/json:
              examples:
                susanna:
                  value: |-
                    {
                    "items": [
                    {
                    "product": "Habanero",
                    "quantity": 1,
                    "price": 153
                    }
                    ],
                    "total": 153
                    }
      security:
        - bearerAuth: []
    post:
      tags:
        - Login, Cart
      summary: POST user's cart
      description: POST user's cart contents
      operationId: post.cart
      responses:
        default:
          description: Default error sample response
          content:
            application/json:
              examples:
                Default:
                  value: |-
                    {
                    "items": [
                    {
                    "product": "glas",
                    "quantity": 1,
                    "price": 50
                    }
                    ],
                    "total": 50
                    }
      security:
        - bearerAuth: []
    delete:
      tags:
        - Login, Cart
      summary: DELETE user's cart
      description: DELETE user's cart
      operationId: delete.cart
      responses:
        default:
          description: Default error sample response
      security:
        - bearerAuth: []
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
  - url: http://localhost:3000
    variables: {}
    description: localhost:3000
